import os
import numpy as np
import pandas
from pandas import DataFrame
from collections import OrderedDict
from lsst.sims.photUtils.PhotometricParameters import PhotometricParameters
import lsst.sims.photUtils.SignalToNoise as Snr
from photoz_tools import *

def convert_params_to_depths(params):
    ### Convert the number of visits in each band to 5sigma magnitude depths
    # params = [ [vu,vg,vr,vi,vz,vy], years]

    visits = params[0]
    years  = params[1]
    print 'visits = ',visits
    print 'years = ',years

    filter_list = ['u','g','r','i','z','y']
    filter_file = "/Users/melissagraham/Science/LSST/photoz_experiments/filters/LSSTcosmosJDEM.filt"
    filters = OrderedDict({})
    for filt in filter_list:
        filters[filt] = importBandpass(filter_file, filt)
    gamma = [0.037,0.038,0.039,0.039,0.04,0.04] #Sam Schmidt
    photParams = PhotometricParameters()

    # m5sig_10year     = np.asarray( (26.1,27.4,27.5,26.8,26.1,24.9), dtype='float' )
    m5sig_1vis_lmags = np.asarray( (23.9,25.0,24.7,24.0,23.3,22.1), dtype='float' )

    m5 = np.zeros( 6, dtype='float' )
    for f,filt in enumerate(filter_list):
        if visits[f] > 0:  m5[f] = m5sig_1vis_lmags[f] + ( 1.25 * np.log10( visits[f] * years / 10.0 ) )
        if visits[f] <= 0: m5[f] = float('NaN')
    # print 'm5: ',m5

    return m5

def convert_zphot_to_binstats(zfnm):
    ### Convert the photoz results into an array of binned statistiscs

    ### Recall, from photoz_tools:
    # def stats_d1pz(in_zSpec,in_zPhot,zbinlow=0.0,zbinhigh=3.0,bias_inliers=False):
    #     # Definitions of outputs. 
    #     #  meanz     = mean zPhot of galaxies in bin
    #     #  fout      = fraction of outliers (SRD calls them catastrophic)
    #     #  bias      = mean dz/(1+z) of galaxies in IQR
    #     #  stddev    = standard deviation in dz/(1+z)
    #     #  IQR       = interquartile range of dz/(1+z)
    #     #  IQRs      = IQR / 1.349, equivalent standard deviation
    # return meanz, fout, bias,err_bias, stddev,err_stddev, IQR,err_IQR, IQRs,err_IQRs

    data = DataFrame( np.array( pandas.read_csv(zfnm,header=None,delim_whitespace=True,comment='#') ) )
    data.columns = ['id','ztrue','zphot','zphoterr','zphotdef','zphotdeferr','Ncm']

    # [0.45, 0.75, 1.05 ... 2.85]
    zbincntrs  = np.arange( 9, dtype='float' ) *0.30 + 0.45
    zbinhwidth = 0.15

    stats = np.zeros( (5,9), dtype='float' )

    for i,zc in enumerate(zbincntrs):
        zlo = zc-zbinhwidth
        zhi = zc+zbinhwidth
        # print 'zlo,zhi = ',zlo,zhi
        tx = np.where( data['Ncm'].values > 0 )[0]
        results = stats_d1pz(data['ztrue'].values[tx],data['zphot'].values[tx],zbinlow=zlo,zbinhigh=zhi,bias_inliers=False)
        stats[0][i] = results[1] #fout
        stats[1][i] = results[2] #bias
        stats[2][i] = results[3] #err_bias
        stats[3][i] = results[8] #IQRs
        stats[4][i] = results[9] #err_IQRs
        del zlo,zhi

    del data,zbincntrs,zbinhwidth

    return stats

if __name__ == '__main__':

    runs_info = [\
    [ [[0,   92, 196, 196, 172, 172], 10.0], 'uvisits_tt88_run1.zphot'],\
    [ [[26,  86, 190, 190, 166, 166], 10.0], 'uvisits_tt88_run2.zphot'],\
    [ [[56,  80, 184, 184, 160, 160], 10.0], 'uvisits_tt88_run3.zphot'],\
    [ [[96,  72, 176, 176, 152, 152], 10.0], 'uvisits_tt88_run4.zphot'],\
    [ [[87, 112, 216, 216, 192,   0], 10.0], 'yvisits_tt88_run1.zphot'],\
    [ [[72,  96, 200, 200, 176,  80], 10.0], 'yvisits_tt88_run2.zphot'],\
    [ [[56,  80, 184, 184, 160, 160], 10.0], 'yvisits_tt88_run3.zphot'],\
    [ [[40,  64, 168, 168, 144, 240], 10.0], 'yvisits_tt88_run4.zphot'],\
    [ [[56,  80, 184, 184, 160, 160],  1.0], 'years_tt88_run2.zphot'],\
    [ [[56,  80, 184, 184, 160, 160],  2.0], 'years_tt88_run3.zphot'],\
    [ [[56,  80, 184, 184, 160, 160],  5.0], 'years_tt88_run4.zphot'],\
    [ [[56,  80, 184, 184, 160, 160], 10.0], 'years_tt88_run5.zphot'] ]

    outfile = open( 'prelim_survey_stddevs.dat', 'w' )
    outfile.write('# File generated by Melissa L. Graham. \n')
    outfile.write('# \n')
    outfile.write('# Each row represents photo-z results from a different LSST survey simulation. \n')
    outfile.write('# In this file, the photo-z results are the robust standard deviation in redshift bins. \n')
    outfile.write('# \n')
    outfile.write('# The first four simulated surveys give more/less time to u-band (Graham et al. 2018). \n')
    outfile.write('# The second four simulated surveys give more/less time to y-band (Graham et al. 2018). \n')
    outfile.write('# The third four surveys are for years 1, 2, 5, and 10 of the LSST (Graham et al. 2018). \n')
    outfile.write('# \n')
    outfile.write('# Columns 1 to 6: survey simulation 5-sigma limiting magnitude in ugrizy \n')
    outfile.write('# Columns 7 to 15: robust standard deviation in bins of photometric redshift. \n')
    outfile.write('# \n')
    outfile.write('# z_bin_centers = [0.45,0.75,1.05,1.35,1.65,1.95,2.25,2.55,2.85] \n')
    outfile.write('# z_bin_full_width = 0.30 \n')
    outfile.write('# z_bin_half_width = 0.15 \n')
    outfile.write('# \n')

    for r,run_info in enumerate(runs_info):
        run_parameters = run_info[0]
        run_fnm_zphot  = run_info[1]
        depths   = convert_params_to_depths(run_parameters)
        binstats = convert_zphot_to_binstats(run_fnm_zphot)
        for depth in depths:
            outfile.write('%6.2f' % depth)
        for stat in binstats[3]:
            outfile.write('%8.4f' % stat)
        outfile.write('\n')

    outfile.close()









